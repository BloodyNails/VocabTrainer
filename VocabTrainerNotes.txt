TODO:
	- !IMPORTANT: 
		- I dont have an closeBrowser event in java
		- I need javascript to POST something to server upon exiting
		
	- implement html warnings
		- maybe add a js script and callit from java if possible
		- possible warnings:
			- when removing list (with words > 0)
			- when creating new list without description
			- when creating new list with lang1 == lang2
			- when leaving a site with a filled input
				/VocabTrainer/Lists/
				/VocabTrainer/Lists/View/
				/VocabTrainer/Training/... (training session)
		
	- remove questionmark in url after forwarding request, might cause errors later
	- vocabulary training servlet
		- training servlet itself
		- complete VocabCycle
		- implement updating the DB
		- add method which gets executed when leaving/closing browser
			- stop timer
			- save progress to db
	
Some convenient additions in the future:
	- remembering inputs 
		- when adding a new word to the list and only one input is filled and the form is submitted, it should remember that input after reloading the page
		- when closing browser
		- when hitting the BACK button but input/inputs are filled
	- remember last session
	- change lang1 and lang2 of lists
	
VocabTrainer/Training:
	- Vocabulary
		- ability to create a new round
		- lists all completed/incompleted rounds
		- you can open detail view of completed rounds which show stats 
		
		- creating round:
			- select lists which you want to get prompted
			- languages of selcted lists must be 2
			- select the language you want to be prompted (must be one of the 2 langs from above)
			- after creating round save it and create the first cycle and save it too
			- after that iterate over all the words from the lists and create the twords and save them too
			- everything which belongs to this round should be saved in db now
			
		- continue round:
			- loadCyclesByRoundID().getLast() -> check if finished
			- if(finished) create a new cycle:
				- get all the twords from last cycle
				- remove the correct twords from the list and pass it to the new cycle
				- create a new VocabTimer()
			- else continue cycle:
				- getTWordsByCycleID and remove the ones which were already prompted
				- create new VocabTimer(time from db)
			- continue/start timer

Insert into web.xml for utf-8 support:

    <filter>
        <filter-name>setCharacterEncodingFilter</filter-name>
        <filter-class>org.apache.catalina.filters.SetCharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <async-supported>true</async-supported>
    </filter>

	<filter-mapping>
		<filter-name>setCharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
Database Stuff:

	Tables:
	
		lists (
			list_id PRIMARY KEY, 
			description, 
			lang1, 
			lang2
		)
		
		words (
			word_id PRIMARY KEY, 
			list_id FOREIGN KEY, 
			word_lang1, 
			word_lang2
		)
		
		// IDs are saved as String: "1,2,3,4"
		rounds (
			round_id PRIMARY KEY,
			completed (true || false),
			list_ids, 
			lang1,
			lang2,
			prompted_lang,
			time (sum of all cycle time), 
			true_count,
			false_count,
			tf_ratio : avg. ratio of all cycles 
		)
		
		cycles (
			cycle_id PRIMARY KEY,
			round_id FOREIGN KEY,
			completed (true || false)
			word_count,
			curr_tword_id, 
			true_count,
			false_count,
			tf_ratio : tfr = false_count / true_count,
			time
		)
		
		twords (
			tword_id,
			word_id,
			cycle_id,
			is_prompted,
			is_correct
		)
		
		// not implemented yet
		total_stats (
			round_count,
			word_count,
			cycle_count,
			total_time,
			true_count,
			false_count,
			true_false_ratios (array with ratios of all cycles),
			total_true_false_ratio (avg. overall ratio)
			worst_list (the list you should learn the most, because you had lots of false inputs)
		)

db_init.sql :
			
	DROP DATABASE vocabtrainer;
	CREATE DATABASE vocabtrainer;
	USE vocabtrainer;

	CREATE TABLE lists(
		list_id INT UNSIGNED NOT NULL,
		description CHAR(100) CHARACTER SET utf8mb4 NOT NULL,
		lang1 VARCHAR(60) NOT NULL,
		lang2 VARCHAR(60) NOT NULL,
		PRIMARY KEY (list_id)
	);
		
	CREATE TABLE words(
		word_id INT UNSIGNED NOT NULL,
		list_id INT UNSIGNED NOT NULL,
		word_lang1 CHAR(100) CHARACTER SET utf8mb4 NOT NULL,
		word_lang2 CHAR(100) CHARACTER SET utf8mb4 NOT NULL,
		PRIMARY KEY (word_id),
		FOREIGN KEY (list_id) REFERENCES lists(list_id)
	);	
		
	CREATE TABLE rounds(
		round_id INT UNSIGNED NOT NULL,
		completed boolean NOT NULL,
		list_ids VARCHAR(100) NOT NULL,
		lang1 VARCHAR(100) NOT NULL,
		lang2 VARCHAR(100) NOT NULL,
		prompted_lang VARCHAR(100) NOT NULL,
		time FLOAT NOT NULL,
		true_count INT UNSIGNED NOT NULL,
		false_count INT UNSIGNED NOT NULL,
		tf_ratio FLOAT NOT NULL,
		PRIMARY KEY (round_id)
	);
	
	
	CREATE TABLE cycles (
		cycle_id INT UNSIGNED NOT NULL,
		round_id INT UNSIGNED NOT NULL,
		completed BOOLEAN NOT NULL,
		word_count INT UNSIGNED NOT NULL,
		curr_tword_id INT UNSIGNED NOT NULL,
		true_count INT UNSIGNED NOT NULL,
		false_count INT UNSIGNED NOT NULL,
		tf_ratio FLOAT NOT NULL,
		time FLOAT NOT NULL,
		PRIMARY KEY (cycle_id),
		FOREIGN KEY (round_id) REFERENCES rounds(round_id)
	);
	
	CREATE TABLE twords (
		tword_id INT UNSIGNED NOT NULL,
		word_id INT UNSIGNED NOT NULL,
		cycle_id INT UNSIGNED NOT NULL,
		is_prompted BOOLEAN NOT NULL,
		is_correct BOOLEAN NOT NULL,
        PRIMARY KEY (tword_id),
		FOREIGN KEY (word_id) REFERENCES words(word_id),
        FOREIGN KEY (cycle_id) REFERENCES cycles(cycle_id)
	);
	
    -- insert test entries
	
	INSERT INTO lists (list_id, description, lang1, lang2) VALUES ('0', 'Familie', 'German', 'Russian');
	
	INSERT INTO words (word_id, list_id, word_lang1, word_lang2) VALUES ('0', '0', N'Großvater', N'де́душка');
	INSERT INTO words (word_id, list_id, word_lang1, word_lang2) VALUES ('1', '0', N'Großmutter', N'ба́бушка');
	INSERT INTO words (word_id, list_id, word_lang1, word_lang2) VALUES ('2', '0', N'Mutter', N'мать');
	INSERT INTO words (word_id, list_id, word_lang1, word_lang2) VALUES ('3', '0', N'Vater', N'оте́ц');
	INSERT INTO words (word_id, list_id, word_lang1, word_lang2) VALUES ('4', '0', N'Bruder', N'брат');
	INSERT INTO words (word_id, list_id, word_lang1, word_lang2) VALUES ('5', '0', N'Schwester', N'сестра́');
    INSERT INTO words (word_id, list_id, word_lang1, word_lang2) VALUES ('6', '0', N'Cousin', N'двою́родный брат');
	
	INSERT INTO rounds (round_id, completed, list_ids, lang1, lang2, prompted_lang, time, true_count, false_count, tf_ratio) VALUES ('0', '0', '0', 'German', 'Russian', 'German', '0.0', '0', '0', '1.0');
    
    -- next list and words
    
    INSERT INTO lists (list_id, description, lang1, lang2) VALUES ('1', 'Family', 'English', 'German');
    
    INSERT INTO words (word_id, list_id, word_lang1, word_lang2) VALUES ('7', '1', N'grandfather/grandpa', N'Großvater');
    INSERT INTO words (word_id, list_id, word_lang1, word_lang2) VALUES ('8', '1', N'grandmother/grandma', N'Großmutter');
    INSERT INTO words (word_id, list_id, word_lang1, word_lang2) VALUES ('9', '1', N'mother/mom/mum', N'Mutter');
    INSERT INTO words (word_id, list_id, word_lang1, word_lang2) VALUES ('10', '1', N'father/dad', N'Vater');
    INSERT INTO words (word_id, list_id, word_lang1, word_lang2) VALUES ('11', '1', N'brother', N'Bruder');
    INSERT INTO words (word_id, list_id, word_lang1, word_lang2) VALUES ('12', '1', N'sister', N'Schwester');
    INSERT INTO words (word_id, list_id, word_lang1, word_lang2) VALUES ('13', '1', N'cousin', N'Cousin');