TODO:
	- implement html warnings
		- maybe add a js script and callit from java if possible
		- possible warnings:
			- when removing list (with words > 0)
			- when creating new list without description
			- when creating new list with lang1 == lang2
			- when leaving a site with a filled input
				/VocabTrainer/Lists/
				/VocabTrainer/Lists/View/
				/VocabTrainer/Training/... (training session)
		
	- remove questionmark in url after forwarding request, might cause errors later
	- vocabulary training servlet
		- training servlet itself
		- complete VocabCycle
		- implement updating the DB
		- implemente Cycle to DB 
		- add method which gets executed when leaving/closing browser
			- stop timer
			- save progress to db
	
Some convenient additions in the future:
	- remembering inputs 
		- when adding a new word to the list and only one input is filled and the form is submitted, it should remember that input after reloading the page
		- when closing browser
		- when hitting the BACK button but input/inputs are filled
	- remember last session
	- change lang1 and lang2 of lists
	
VocabTrainer/Training:
	- /Vocabulary:
		Sequence:
			- list of rounds
			- create new round / delete round / continue paused round / check stats from finished round
		
			-1: select lists you want to get asked
			0: check if interrupted round:
					yes: get last_cycle_id from round, check if cycle interrupted: 
						yes: get curr_word_id from cycle, load word and continue with (5), start timer again
						no: start new cycle
					no: start a new round go to (1)
			1: (select specific list || select all lists) -> choose language to be prompted
			2: all words from selected lists read from "words" and written to "vocab_words" with: prompted = false
			3: create cycle (false_count = 0, true_count = 0), add cycle_id to cycle_ids in "rounds", count words in "vocab_words" and set cycle->word_count to counted value, set prompted to false for all words in "vocab_words", start timer
			4: create prompt: get all "prompted == false" words from "vocab_words", 
				if amount == 0: stop timer, end cycle
					check false_count: 
						if fc == 0: end round (6)
						if fc > 0: start new cycle (3)
				if amount > 0: get random word from "prompted == false" words
			5: input false: false_count+1 (code and db), mark word as prompted in "vocab_words", go to (4)
				input true: true_count+1 (code and db), delete word in "vocab_words", go to (4)
			6: round finished: get all stats from cycles, ...
		
		- make every round cycle based: first cycle all words, second cycle the words you didn't know at first, and so on... until you entered every word correct
		- layout:
			- timer which increases whilst the round proceeds
			- label: question (get a random word from the amount of words which has been selected before, which has not been questioned yet)
			- input: answer (translate the word from label to your selected language)
			- button: submit (send answer to servlet and check for errors)
		- stats: 
			correctness (therefore also: total number of false/true inputs), 
			time -> therefore add timer and display it on every round
			total number of cycles, 
			avg. cycles per round
	
Database Stuff:

	Tables:
	
		lists (
			list_id PRIMARY KEY, 
			description, 
			lang1, 
			lang2
		)
		
		words (
			word_id PRIMARY KEY, 
			list_id FOREIGN KEY, 
			word_lang1, 
			word_lang2
		)
		
		cycles (
			cycle_id PRIMARY KEY,
			round_id FOREIGN KEY,
			completed (true || false)
			word_count,
			curr_word_id, 
			true_count,
			false_count,
			tf_ratio : r = false_count / true_count,
			time
		)
		
		// all words from selected lists will be pasted here
		vocab_words ( 
			word_id,
			word_lang1,
			word_lang2,
			prompted (true || false)
		)
		
		// IDs are saved as String: "1,2,3,4"
		rounds (
			round_id PRIMARY KEY,
			completed (true || false),
			list_ids (array of all list ID's the words came from), 
			lang1,
			lang2,
			prompted_lang,
			cycle_ids (array of ID's from all cycles),
			time (sum of all cycle time), 
			true_count,
			false_count,
			tf_ratio : avg. ratio of all cycles 
		)
		
		trainig_words (
			word_id PRIMARY KEY,
			cycle_id FOREIGN KEY,
			is_prompted, 
			is_correct
		)
		
		total_stats (
			round_count,
			word_count,
			cycle_count,
			total_time,
			true_count,
			false_count,
			true_false_ratios (array with ratios of all cycles),
			total_true_false_ratio (avg. overall ratio)
			worst_list (the list you should learn the most, because you had lots of false inputs)
		)
		
Insert into web.xml for utf-8 support:

    <filter>
        <filter-name>setCharacterEncodingFilter</filter-name>
        <filter-class>org.apache.catalina.filters.SetCharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <async-supported>true</async-supported>
    </filter>

	<filter-mapping>
		<filter-name>setCharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

db_init.sql :
			
	drop database vocabtrainer;
	create database vocabtrainer;
	use vocabtrainer;

	CREATE TABLE lists(
		list_id INT UNSIGNED NOT NULL,
		description CHAR(100) CHARACTER SET utf8mb4 NOT NULL,
		lang1 VARCHAR(60) NOT NULL,
		lang2 VARCHAR(60) NOT NULL,
		PRIMARY KEY (list_id)
	);
		
	CREATE TABLE words(
		word_id INT UNSIGNED NOT NULL,
		list_id INT UNSIGNED NOT NULL,
		word_lang1 CHAR(100) CHARACTER SET utf8mb4 NOT NULL,
		word_lang2 CHAR(100) CHARACTER SET utf8mb4 NOT NULL,
		PRIMARY KEY (word_id),
		FOREIGN KEY (list_id) REFERENCES lists(list_id)
	);	
		
	CREATE TABLE rounds(
		round_id INT UNSIGNED NOT NULL,
		completed boolean NOT NULL,
		cycle_ids VARCHAR(100),
		lang1 VARCHAR(100) NOT NULL,
		lang2 VARCHAR(100) NOT NULL,
		prompted_lang VARCHAR(100) NOT NULL,
		time FLOAT NOT NULL,
		true_count INT UNSIGNED NOT NULL,
		false_count INT UNSIGNED NOT NULL,
		tf_ratio FLOAT NOT NULL,
		PRIMARY KEY (round_id)
	);
	
	
	CREATE TABLE cycles (
		cycle_id INT UNSIGNED NOT NULL,
		round_id INT UNSIGNED NOT NULL,
		completed BOOLEAN NOT NULL,
		word_count INT UNSIGNED NOT NULL,
		curr_tword_id INT UNSIGNED NOT NULL,
		true_count INT UNSIGNED NOT NULL,
		false_count INT UNSIGNED NOT NULL,
		tf_ratio FLOAT NOT NULL,
		time FLOAT NOT NULL,
		PRIMARY KEY (cycle_id),
		FOREIGN KEY (round_id) REFERENCES rounds(round_id)
	);
	
	CREATE TABLE twords (
		tword_id INT UNSIGNED NOT NULL,
		word_id INT UNSIGNED NOT NULL,
		cycle_id INT UNSIGNED NOT NULL,
		is_prompted BOOLEAN NOT NULL,
		is_correct BOOLEAN,
        PRIMARY KEY (tword_id),
		FOREIGN KEY (word_id) REFERENCES words(word_id),
        FOREIGN KEY (cycle_id) REFERENCES cycles(cycle_id)
	);
	
    -- insert test entries:
	
	INSERT INTO lists (list_id, description, lang1, lang2) VALUES ('999', 'Familie', 'German', 'Russian');
	
	INSERT INTO words (word_id, list_id, word_lang1, word_lang2) VALUES ('0', '999', N'Großvater', N'де́душка');
	INSERT INTO words (word_id, list_id, word_lang1, word_lang2) VALUES ('1', '999', N'Großmutter', N'ба́бушка');
	INSERT INTO words (word_id, list_id, word_lang1, word_lang2) VALUES ('2', '999', N'Mutter', N'мать');
	INSERT INTO words (word_id, list_id, word_lang1, word_lang2) VALUES ('3', '999', N'Vater', N'оте́ц');
	INSERT INTO words (word_id, list_id, word_lang1, word_lang2) VALUES ('4', '999', N'Bruder', N'брат');
	INSERT INTO words (word_id, list_id, word_lang1, word_lang2) VALUES ('5', '999', N'Schwester', N'сестра́');
	
	INSERT INTO rounds (round_id, completed, list_ids, cycle_ids, lang1, lang2, prompted_lang, time, true_count, false_count, tf_ratio) VALUES ('0', '0', '999', '', 'German', 'Russian', 'German', '0.0', '0', '0', '1.0');